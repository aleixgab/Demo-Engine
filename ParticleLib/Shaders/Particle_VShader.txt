#version 330 core
layout (location = 0) in vec3 aPos; //Static Pos
layout (location = 1) in vec2 aCoords;
layout (location = 2) in vec2 life; //.x = curr life //.y = Max life (particles may have diferent life times)
layout (location = 3) in vec3 aPosition; //Initial position
layout (location = 4) in vec3 aDirection; 
layout (location = 5) in float aSpeed; 
layout (location = 6) in float aAcceleration; 
layout (location = 7) in vec3 aGravity;
layout (location = 8) in float aAngle; 
layout (location = 9) in float aAngleVel; 
layout (location = 10) in float	aAngleAccel;
layout (location = 11) in float	aSize; 
layout (location = 12) in float aSizeTime;  

uniform mat4 view;
uniform mat4 projection;

//Animated Particle
uniform int isAnimated;
uniform int textRows;
uniform int textColumns;
uniform float animatedTime;

//Color Particle
uniform	float positions[10];
uniform	int colorSize;
uniform	vec4 colors[10];

out vec2 texCoords;
out vec4 particleColor;

void main()
{
	float lifeNorm = life.x/life.y;

	//ANIMATION
	if (isAnimated == 1)
	{
		float currentFrame = floor(mod(life.x / animatedTime, textRows * textColumns));
		vec2 normCoord = vec2(1.0 / textColumns, 1.0 / textRows);

		texCoords.x = mod(currentFrame,textColumns) * normCoord.x;
		texCoords.y = ((textRows - 1) - floor(currentFrame / textColumns)) * normCoord.y;

		if(aCoords.x == 1)
			texCoords.x += normCoord.x;
		if(aCoords.y == 1)
			texCoords.y += normCoord.y;
	}
	else
		texCoords = aCoords;

	//COLOR
	particleColor = colors[0];

	if (colorSize > 1)
	{
		bool findColor = false;
		for (int i = 0; i < colorSize - 1; i++)
		{
			if (lifeNorm < positions[i + 1] && findColor == false)
			{
				float timeNorm = (lifeNorm - positions[i]) / (positions[i + 1] - positions[i]);
				particleColor = mix(colors[i], colors[i + 1], timeNorm);
				findColor = true;
			}
		}
		if (findColor == false)
		{
			particleColor = colors[colorSize - 1];
		}
	}

	//Tranlate
	vec3 pos = aPosition + aDirection * (aSpeed + aAcceleration * life.x) * life.x + aGravity * life.x * life.x;

	//Billboard
	vec3 xAxis = normalize(cross(view[1].xyz, view[2].xyz));
	mat4 aModel = mat4(xAxis.x, view[1].x, view[2].x, 0.0f,
					   xAxis.y, view[1].y, view[2].y, 0.0f,
					   xAxis.z, view[1].z, view[2].z, 0.0f,
					   pos,				  1.0f);

	//Plane Rotation
	float angle = radians(aAngle) + (radians(aAngleVel) + radians(aAngleAccel) * life.x) * life.x;

								 //Bilboard+Pos		//Angle rotation Z axis							//VertexPos + Size of the plane
    gl_Position = projection * view * aModel * vec4(cos(angle / 2), 0.0, 0.0, sin(angle / 2)) * vec4(aPos * (aSize + aSizeTime * life.x), 1.0);
}