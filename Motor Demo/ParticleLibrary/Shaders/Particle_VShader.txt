#version 330 core
layout (location = 0) in vec3 aPos; 
layout (location = 1) in vec2 aCoords; 
layout (location = 2) in vec2 life; //.x = curr life //.y = Max life (particles may have diferent life times)
layout (location = 3) in vec3 aPosition; 
layout (location = 4) in float aAngle; 
layout (location = 5) in float aSize; 

out vec2 texCoords;
out float lifeNorm;

uniform mat4 view;
uniform mat4 projection;

//Animated Particle
uniform int isAnimated;
uniform int textRows;
uniform int textColumns;
uniform float animatedTime;

void main()
{
	lifeNorm = 1.0 - (life.x/life.y);

	//ANIMATION
	if (isAnimated == 1)
	{
		float currentFrame = floor(mod((life.y - life.x) / animatedTime, textRows * textColumns));
		vec2 normCoord = vec2(1.0 / textColumns, 1.0 / textRows);

		texCoords.x = mod(currentFrame,textColumns) * normCoord.x;
		texCoords.y = ((textRows - 1) - floor(currentFrame / textColumns)) * normCoord.y;

		if(aCoords.x == 1)
			texCoords.x += normCoord.x;
		if(aCoords.y == 1)
			texCoords.y += normCoord.y;
	}
	else
		texCoords = aCoords;

	//Billboard
	vec3 zAxis = vec3(view[2].xyz); //Camera Forward
	vec3 yAxis = vec3(view[1].xyz); //Camera Up
	vec3 xAxis = normalize(cross(yAxis, zAxis));

	mat4 aModel = mat4(xAxis.x, yAxis.x, zAxis.x, 0.0f,
					   xAxis.y, yAxis.y, zAxis.y, 0.0f,
					   xAxis.z, yAxis.z, zAxis.z, 0.0f,
					   aPosition,				  1.0f);
	//Plane Rotation
	radians(aAngle);
	aModel *= mat4(cos(aAngle), -sin(aAngle), 0.0, 0.0,
				   sin(aAngle),	cos(aAngle),  0.0, 0.0,
                   0.0,			0.0,		  1.0, 0.0,
                   0.0,			0.0,		  0.0, 1.0);

    gl_Position = projection * view * aModel * vec4(aPos * aSize, 1.0);
}